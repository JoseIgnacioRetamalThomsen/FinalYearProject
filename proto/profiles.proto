//Jose I. Retamal
//GMIT 2020

syntax = "proto3";

package wcity;

import "profiles_shared.proto";

option java_multiple_files = true;
option java_package = "io.grpc.wcity.profiles";
option java_outer_classname = "ProfilesProto";
option objc_class_prefix = "RPC";

// Define server interface
// For conetion from profiles main service to front end
service Profiles {

    // Search for city,place
    //
    // Given a serach frase it will return desidere amount of matches.
    rpc SearchAllDBA (SearchAllRequest) returns (stream SearchAllResult);

    // Returns all citys on the database
    //
    // The amount of city's can be huge so they are return
    // as a one way stream, a limit can be set.
    rpc GetAllCitys (GetAllRequest) returns (stream City);

    // Returns all places on the database
    //
    // The amount of city's can be huge so they are return
    // as a one way stream, a limit can be set.
    rpc GetAllPlaces (GetAllRequest) returns (stream Place);

    // Create a new user
    //
    // Users are only created when a user create a new account
    // on the auth service. When user create account auth service
    // will use this method to create the account in the neo4j db.
    rpc CreateUser (CreateUserRequestP) returns (UserResponseP);

    // Get User
    //
    // Returns all data for the requested user, the request
    // must contain the user email wich is the unique identifier.
    rpc GetUser (GetUserRequestP) returns (UserResponseP);

    // Update user data
    //
    // Must include the user email, the only data that can be updated
    // at the moment is user description.
    rpc UpdateUser (CreateUserRequestP) returns (UserResponseP);

    // Create a new city
    //
    // Users create citys, the city is identify by name and country,
    // after the city is created it will have a id which is a integer.
    // The id is used for add post and places to the city.
    rpc CreateCity (CreateCityRequestP) returns (CityResponseP);

    //
    //
    //
    rpc CreatePlace (CreatePlaceRequestP) returns (PlaceResponseP);
    rpc UpdateCity (CreateCityRequestP) returns (CityResponseP);
    rpc UpdatePlace (CreatePlaceRequestP) returns (PlaceResponseP);
    rpc GetCity (GetCityRequestP) returns (CityResponseP);
    //  request only need : email, token,name,city and country in request
    rpc GetPlace (GetPlaceRequestP) returns (PlaceResponseP);
    rpc VisitCity (VisitCityRequestP) returns (VisitCityResponseP);
    rpc VisitPlace (VisitPlaceRequestP) returns (VisitPlaceResponseP);
    rpc GetVisitedCitys (VisitedRequestP) returns (VisitedCitysResponseP);
    rpc GetVisitedPlaces (VisitedRequestP) returns (VisitedPlacesResponseP);
    // reques only need email,tokem, city name and city coutry
    rpc GetCityPlaces (CreateCityRequestP) returns (VisitedPlacesResponseP);
}

message CreateUserRequestP {
    string token = 1;
    string email = 2;
    User user = 3;
}
message GetUserRequestP {
    string token = 1;
    string email = 2;
}
message UserResponseP {
    bool valid = 1;
    User user = 2;
}
message CreateCityRequestP {
    string token = 1;
    string name = 2;//bug email
    City city = 3;
}
message GetCityRequestP {
    string token = 1;
    string name = 2;//bug email
    string cityName = 3;
    string cityCountry = 4;
}
message CityResponseP {
    bool valid = 1;
    City city = 2;
}
message CreatePlaceRequestP {
    string token = 1;
    string name = 2;//bug email
    Place place = 3;
}
message GetPlaceRequestP {
    string token = 1;
    string email = 2;
    string placeName = 3;
    string placeCity = 4;
    string placeCountry = 5;
}
message PlaceResponseP {
    bool valid = 1;
    Place place = 2;
}
message VisitCityRequestP {
    string token = 1;
    string email = 2;
    int32 id = 3;
}
message VisitCityResponseP {
    bool valid = 1;
    string timeStamp = 2;
}
message VisitPlaceRequestP {
    string token = 1;
    string email = 2;
    int32 placeId = 3;
}
message VisitPlaceResponseP {
    bool valid = 1;
    string timeStamp = 2;
}
message VisitedRequestP {
    string token = 1;
    string email = 2;
}
message VisitedCitysResponseP {
    bool valid = 1;
    repeated City citys = 3;
}
message VisitedPlacesResponseP {
    bool valid = 1;
    repeated Place places = 3;
}
